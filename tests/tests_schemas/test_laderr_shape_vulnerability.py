import pytest
from icecream import ic
from rdflib import Graph, Namespace, URIRef, RDF
from pyshacl import validate

from laderr_engine.laderr_lib.constants import SHACL_FILES_PATH
from tests.utils import find_file_by_partial_name

# Namespaces
LADERR = Namespace("https://w3id.org/laderr#")

@pytest.fixture(scope="module")
def shape_graph():
    g = Graph()
    shape = find_file_by_partial_name(SHACL_FILES_PATH, "laderr-shape-vulnerability")
    g.parse(shape, format="turtle")
    return g

@pytest.fixture
def base_vulnerability():
    """Create a minimal valid Vulnerability linked to exactly one Entity and one Capability."""
    g = Graph()

    vulnerability = URIRef("https://example.org/vulnerability/0")
    entity = URIRef("https://example.org/entity/0")
    capability = URIRef("https://example.org/capability/0")

    g.add((vulnerability, RDF.type, LADERR.Vulnerability))
    g.add((entity, LADERR.vulnerabilities, vulnerability))
    g.add((entity, RDF.type, LADERR.Entity))

    g.add((capability, RDF.type, LADERR.Capability))
    g.add((entity, LADERR.capabilities, capability))

    g.add((vulnerability, LADERR.exposes, capability))

    g.bind("laderr", LADERR)
    return g, vulnerability, entity, capability


@pytest.mark.parametrize("entity_count, should_pass", [
    (1, True),   # Exactly one entity links to vulnerability - valid
    (0, False),  # No entity links to vulnerability - invalid
    (2, False),  # More than one entity links to vulnerability - invalid
])
def test_vulnerability_entity_link(shape_graph, base_vulnerability, entity_count, should_pass):
    g, vulnerability, _, _ = base_vulnerability

    # Remove all existing links to start fresh
    g.remove((None, LADERR.vulnerabilities, vulnerability))

    # Add exactly `entity_count` entities linking to this vulnerability
    for i in range(entity_count):
        entity = URIRef(f"https://example.org/entity/{i}")
        g.add((entity, RDF.type, LADERR.Entity))
        g.add((entity, LADERR.vulnerabilities, vulnerability))

    conforms, _, _ = validate(g, shacl_graph=shape_graph, data_graph_format="turtle", shacl_graph_format="turtle")
    assert conforms is should_pass


@pytest.mark.parametrize("exposed_capability_count, should_pass", [
    (0, False),  # No exposed capability - invalid (warning)
    (1, True),   # Exactly one exposed capability - valid
    (2, True),   # Multiple exposed capabilities - valid
])
def test_vulnerability_exposes_min_count(shape_graph, base_vulnerability, exposed_capability_count, should_pass):
    g, vulnerability, entity, _ = base_vulnerability

    # Remove all existing exposes relationships to start fresh
    g.remove((vulnerability, LADERR.exposes, None))

    # Add new exposed capabilities
    for i in range(exposed_capability_count):
        capability = URIRef(f"https://example.org/capability/{i}")
        g.add((capability, RDF.type, LADERR.Capability))
        g.add((vulnerability, LADERR.exposes, capability))
        g.add((entity, LADERR.capabilities, capability))  # Link to same entity

    conforms, _, _ = validate(g, shacl_graph=shape_graph, data_graph_format="turtle", shacl_graph_format="turtle")
    assert conforms is should_pass


@pytest.mark.parametrize("exposed_capability_belongs_to_entity, should_pass", [
    (True, True),   # Exposes a capability of the correct entity - valid
    (False, False), # Exposes a capability from a different entity - invalid (SPARQL check)
])
def test_vulnerability_exposes_integrity(shape_graph, base_vulnerability, exposed_capability_belongs_to_entity, should_pass):
    g, vulnerability, entity, _ = base_vulnerability

    # Remove existing exposes relationships
    g.remove((vulnerability, LADERR.exposes, None))

    # Set exposed capability (either belonging to the same entity or a different one)
    if exposed_capability_belongs_to_entity:
        capability = URIRef("https://example.org/capability/0")  # The existing one
    else:
        capability = URIRef("https://example.org/foreign-capability")
        foreign_entity = URIRef("https://example.org/foreign-entity")
        g.add((foreign_entity, RDF.type, LADERR.Entity))
        g.add((foreign_entity, LADERR.capabilities, capability))

    g.add((capability, RDF.type, LADERR.Capability))
    g.add((vulnerability, LADERR.exposes, capability))

    conforms, _, _ = validate(g, shacl_graph=shape_graph, data_graph_format="turtle", shacl_graph_format="turtle")
    assert conforms is should_pass
